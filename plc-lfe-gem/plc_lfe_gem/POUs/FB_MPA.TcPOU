<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MPA" Id="{3965ca68-046c-4858-93f1-aaf5b6059f9e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MPA
VAR_INPUT
	(*EPS Interlock Bits*)
	ibInsertOK: BOOL;
	ibRetractOK: BOOL;
	ibOverrideInterlock:BOOL; (*if true interlocks are ignored*)
	// Reset fault
	{attribute 'pytmc' := '
    pv: FF_Reset
	'}
    i_xReset: BOOL;
	i_sDevName : T_MaxString :=  'MPA'; // Device name for diagnostic
	i_nTransitionRootID: UDINT; //A unique transition Root ID that is equal to or greater than 1000
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv:
	'}
	q_stAct 	:	ST_MPA;
	{attribute 'pytmc' := '
    pv: MPS_FAULT
	'}
	xMPS_OK:BOOL;
	{attribute 'pytmc' := '
    pv: MOT_DONE
	'}
	xDone:Bool; // Motion is Done 
END_VAR
VAR_IN_OUT
	io_fbFFHWO    :    FB_HardwareFFOutput;
	fbArbiter: FB_Arbiter();
END_VAR
VAR
	// PMPS
	tBPTMtimeout:TON;
	bMoving : BOOL;
	bDone :BOOL;
	ibPMPS_OK:BOOL;
	bptm: BeamParameterTransitionManager; 
	// PMPS
	fbFF    :    FB_FastFault :=(
        i_DevName := 'MPA',
        i_Desc := 'Fault occurs when the device is moving',
        i_TypeCode := 16#1010);
	(*Init*)
	xFirstPass	:	BOOL;
	fbFSInit		:	R_TRIG;
	
	(* Timeouts*)
	tTimeOutDuration: TIME:= T#5S;
	tInserttimeout: TON;
	tRetracttimeout:TON;
	
	(*IO*)
	i_xInsertedLS	AT%I*: BOOL;
	i_xRetractedLS	AT%I*: BOOL;
	q_xInsert_DO	AT%Q*: BOOL;
	q_xRetract_DO	AT%Q*: BOOL;
	
	
	// For logging
    fbLogger : FB_LogMessage := (eSubsystem:=E_SubSystem.MOTION);
    ePrevState : E_PositionState;
    tErrorPresent : R_TRIG;
    tAction : R_TRIG; // Primary action of this device (OPN_DO, etc.)
    tOverrideActivated : R_TRIG;
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(*Initialize*)
fbFSInit( CLK := TRUE, Q => xFirstPass);
(*IO Mapping*)
ACT_IO();

IF xFirstPass THEN
	q_stAct.eState := E_PositionState.INVALID;
	q_stAct.bRetract_SW := FALSE;
	q_stAct.bInsert_SW := FALSE;
	fbFF.i_DevName := i_sDevName;
END_IF


(* Manage States*)
IF q_stAct.i_bInLS AND  q_stAct.i_bOutLS THEN
	q_stAct.eState:=E_PositionState.INVALID;
ELSIF NOT q_stAct.i_bInLS AND q_stAct.i_bOutLS THEN 
	q_stAct.eState:=E_PositionState.RETRACTED;
ELSIF q_stAct.i_bInLS AND NOT q_stAct.i_bOutLS THEN 
	q_stAct.eState:=E_PositionState.INSERTED;
ELSIF NOT q_stAct.i_bInLS AND NOT q_stAct.i_bOutLS THEN 
	q_stAct.eState:=E_PositionState.MOVING;
ELSE
	q_stAct.eState:=E_PositionState.INVALID;
END_IF

(*Set the Done signal*)
xDone := (q_stAct.bRetract_SW AND q_stAct.eState=E_PositionState.RETRACTED) OR (q_stAct.eState=E_PositionState.INSERTED AND q_stAct.bInsert_SW);
	

(*MPS FAULT*)
(**)
xMPS_OK := i_xInsertedLS XOR i_xRetractedLS;//(q_stAct.eState=RETRACTED) OR (q_stAct.eState=INSERTED);


(*PMPS PERMISSION*)


(* Can't have bRetract_SW and  bInsert_SW both be true*)
(*If (q_stAct.bRetract_SW) and (q_stAct.bInsert_SW) THEN
	q_stAct.bRetract_SW := FALSE;
	q_stAct.bInsert_SW := FALSE;
END_IF*)

q_stAct.bRetractOK := ibRetractOK;
q_stAct.bInsertOK := ibInsertOK;

(*Actuate the device*)
q_stAct.q_bRetract := q_stAct.bRetractOK AND q_stAct.bRetract_SW;
q_stAct.q_bInsert := q_stAct.bInsertOK AND q_stAct.bInsert_SW;

IF q_stAct.q_bInsert THEN
	q_stAct.q_bRetract := FALSE;
	q_stAct.bRetract_SW:= FALSE;
ELSIF q_stAct.q_bRetract THEN
	q_stAct.q_bInsert := FALSE;
	q_stAct.bInsert_SW:= FALSE;
END_IF;


(*Timers*)
tInserttimeout(IN:= q_stAct.q_bInsert, PT := tTimeOutDuration );
tRetracttimeout(IN:= q_stAct.q_bRetract, PT := tTimeOutDuration);

///Check moving postion timout
IF NOT q_stAct.i_bInLS AND tInserttimeout.Q THEN 
	q_stAct.bErrorPresent := TRUE;
ELSIF NOT q_stAct.i_bOutLS AND tRetracttimeout.Q THEN 
	q_stAct.bErrorPresent := TRUE; 
END_IF


(*FAST FAULT*)
fbFF(i_xOK := xMPS_OK,
    i_xReset := i_xReset,
	i_xAutoReset :=TRUE,
    io_fbFFHWO := io_fbFFHWO);


(*Soft IO Mapping*)
ACT_IO();
(*Logger*)
ACT_Logger();
ACT_PMPS();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{090f58e5-b160-4478-a84f-328a90ba6204}">
      <Implementation>
        <ST><![CDATA[(*Inputs*)
q_stAct.i_bInLS :=  i_xInsertedLS;
q_stAct.i_bOutLS := i_xRetractedLS;
	
(*outputs*)
q_xInsert_DO:=q_stAct.q_bInsert;
q_xRetract_DO:=q_stAct.q_bRetract;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{335c841c-c24f-43fc-9588-81bc48299b4a}">
      <Implementation>
        <ST><![CDATA[

//Position STATE Logger  
IF ePrevState <> q_stAct.eState THEN
	  CASE q_stAct.eState OF
		E_PositionState.INVALID:
			fbLogger(sMsg:='Device is in invalid position.', eSevr:=TcEventSeverity.Critical);
  		E_PositionState.MOVING:
			fbLogger(sMsg:='Device moving', eSevr:=TcEventSeverity.Warning);
		E_PositionState.RETRACTED:
			fbLogger(sMsg:='Device retracted.', eSevr:=TcEventSeverity.Info);
		E_PositionState.INSERTED:
			fbLogger(sMsg:='Device inserted.', eSevr:=TcEventSeverity.Info);
	  END_CASE
	  ePrevState := q_stAct.eState;  
  END_IF
 
 

// Log valve open
tAction(CLK:= q_stAct.q_bRetract XOR q_stAct.q_bInsert);
IF tAction.Q THEN fbLogger(sMsg:='Device commanded to actuate', eSevr:=TcEventSeverity.Info); END_IF
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_PMPS" Id="{b2656039-8c96-4e89-8d25-1224e9126892}">
      <Implementation>
        <ST><![CDATA[//bMoving := ((q_stAct.bRetract_SW OR NOT q_stAct.bInsert_SW) AND q_stAct.i_bInLS) XOR  ((NOT q_stAct.bRetract_SW OR q_stAct.bInsert_SW) AND q_stAct.i_bOutLS);
//bDone :=  ((q_stAct.bRetract_SW OR NOT q_stAct.bInsert_SW) AND q_stAct.i_bOutLS) XOR ((NOT q_stAct.bRetract_SW OR q_stAct.bInsert_SW) AND q_stAct.i_bInLS);

bptm(fbArbiter:=fbArbiter,
     i_TransitionAssertionID:=i_nTransitionRootID+2,
     i_stTransitionAssertion:=PMPS_GVL.cstSafeBeam,
     i_nRequestedAssertionID:=i_nTransitionRootID+ BOOL_TO_UDINT(q_stAct.bRetract_SW AND NOT q_stAct.bInsert_SW ),
     i_stRequestedAssertion:=,
     i_xMoving:=NOT xDone,
     i_xDoneMoving:= xDone,
     stCurrentBeamParameters:=PMPS_GVL.stCurrentBeamParameters,
     q_xTransitionAuthorized=>);
	 
	 // Timeout
tBPTMtimeout(IN:= bptm.i_xMoving AND NOT bptm.q_xTransitionAuthorized , PT:=T#1S);
ibPMPS_OK := bptm.q_xTransitionAuthorized OR tBPTMtimeout.Q;
	 ]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_MPA">
      <LineId Id="94" Count="1" />
      <LineId Id="98" Count="2" />
      <LineId Id="102" Count="3" />
      <LineId Id="111" Count="0" />
      <LineId Id="449" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="84" Count="9" />
      <LineId Id="81" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="158" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="337" Count="1" />
      <LineId Id="113" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="272" Count="6" />
      <LineId Id="280" Count="0" />
      <LineId Id="279" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="213" Count="6" />
      <LineId Id="9" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="76" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="66" Count="5" />
      <LineId Id="327" Count="4" />
      <LineId Id="393" Count="0" />
      <LineId Id="332" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="512" Count="1" />
      <LineId Id="520" Count="0" />
    </LineIds>
    <LineIds Name="FB_MPA.ACT_IO">
      <LineId Id="5" Count="0" />
      <LineId Id="2" Count="1" />
      <LineId Id="6" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MPA.ACT_Logger">
      <LineId Id="7" Count="2" />
      <LineId Id="11" Count="12" />
      <LineId Id="40" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="30" Count="3" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_MPA.ACT_PMPS">
      <LineId Id="2" Count="1" />
      <LineId Id="17" Count="0" />
      <LineId Id="4" Count="7" />
      <LineId Id="1" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="2" />
      <LineId Id="37" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>